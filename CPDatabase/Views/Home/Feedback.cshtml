@model FeedbackViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["Reports&Feedbacks"];
}

<h3>@Localizer["Reports&Feedbacks"]</h3>
@if (User.Identity.Name == null)
{
    <form asp-action="MakeFeedback" asp-controller="Home" asp-anti-forgery="true">
        <div class="validation" asp-validation-summary="All"></div>
        <input type="hidden" asp-for="ReturnUrl" value="site.com" />
        <div>
            <div class="form-group">
                <label asp-for="Username"></label>
                <input type="text" asp-for="Username" />
                <span asp-validation-for="Username" />
            </div>
            <div class="form-group">
                <label asp-for="Email"></label>
                <input asp-for="Email" />
                <span asp-validation-for="Email" />
            </div>
            <div class="form-group">
                <label asp-for="Message"></label>
                <input asp-for="Message" />
                <span asp-validation-for="Message" />
            </div>
            <div class="form-group">
                <input type="submit" value="Send" class="btn btn-outline-dark" />
            </div>
        </div>
    </form>
}
<table class="table">
    <tr>
        <td>Id</td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.MessageDateSort">@Localizer["MessageDate"]</a></td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.UsernameSort">@Localizer["UserName"]</a></td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.EmailSort">@Localizer["Email"]</a></td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.MessageSort">@Localizer["Message"]</a></td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.ReplySort">@Localizer["Reply"]</a></td>
        <td><a asp-action="Feedback" asp-route-sortOrder="@Model.SortViewModel.ReplyDateSort">@Localizer["ReplyDate"]</a></td>
    </tr>
    @foreach (var feedback in Model.Feedbacks)
    {
        <tr>
            <td>@feedback.MessageId</td>
            <td>@feedback.DateMessage</td>
            <td>@feedback.Username</td>
            <td>@feedback.Email</td>
            <td>@feedback.Message</td>
            <td>
                @if (User.Identity.Name != null && feedback.Reply == null)
                {
                    <form method="post" action="~/Home/Reply">
                        <textarea cols="20" rows="2" name="Reply"></textarea>
                        <input type="hidden" name="MessageId" value="@feedback.MessageId" />
                        <button type="submit" class="btn btn-dark">@Localizer["WriteReply"]</button>
                    </form>
                }
                else if (User.Identity.Name == null && feedback.Reply == null)
                {
                    @:<i>@Localizer["LoginReply"]</i>
                }
                else
                {
                    @feedback.Reply
                }
            </td>
            <td>@feedback.DateReply</td>
        </tr>
    }
</table>
@if (Model.PageViewModel.TooFarToFirst)
{
    <a asp-action="Feedback" asp-route-page="1" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-secondary">1</a>
}
@if (Model.PageViewModel.HasPreviousPage3)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber - 3)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber - 3).ToString())</a>
}
@if (Model.PageViewModel.HasPreviousPage2)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber - 2)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber - 2).ToString())</a>
}
@if (Model.PageViewModel.HasPreviousPage)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber - 1)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber - 1).ToString())</a>
}
<span class="btn">@Model.PageViewModel.PageNumber.ToString()</span>
@if (Model.PageViewModel.HasNextPage)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber + 1)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber + 1).ToString())</a>
}
@if (Model.PageViewModel.HasNextPage2)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber + 2)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber + 2).ToString())</a>
}
@if (Model.PageViewModel.HasNextPage3)
{
    <a asp-action="Feedback" asp-route-page="@(Model.PageViewModel.PageNumber + 3)" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-outline-dark">@((Model.PageViewModel.PageNumber + 3).ToString())</a>
}
@if (Model.PageViewModel.TooFarToLast)
{
    <a asp-action="Feedback" asp-route-page="@Model.PageViewModel.TotalPages" asp-route-sortOrder="@Model.SortViewModel.Current" class="btn btn-secondary">@Model.PageViewModel.TotalPages.ToString()</a>
}